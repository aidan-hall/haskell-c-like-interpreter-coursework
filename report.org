#+latex_header: \usepackage[margin=2cm]{geometry}
#+options: toc:nil
* Introduction
After consideration, I will try to implement a parser and interpreter
for a simple C-style language using ~megaparsec~. This will be
decently easy to parse, but will present more complexity than
something like Lisp[fn:1] or Forth.

I will use the BNF grammar file used in the [[https://warwick.ac.uk/fac/sci/dcs/teaching/material/cs325/][CS325]] coursework, which
describes the syntax of a language called ‘Mini-C’, as a basis for my
syntax.  It will be interesting to see if Haskell will allow me to do
in 3 days what would take a third-year 3 months with C[fn:2].

Necessary simplifications may include all variables being
integers/numbers.

For this to be an imperative language, it needs sequence, selection
and iteration. 

* Running
When run with ~stack run~, the user is prompted for the name of a file
to interpret. Several ~.txt~ files have been provided as examples.

* Maths Expressions
I created an MVP mathematical expression parser and evaluator.
Even this appears to technically meet the requirements for 40%.

At this point, I encountered slow-down in compile time due to all my
code being in ~Main.hs~. I mitigated this by splitting the project
into many files, like a C programmer in the ‘70s[fn:3].

It was straightforward to add Boolean expressions by using the
convention that zero means false, and non-zero means true.

The relevant files are ~Lex.hs~, ~Value.hs~, ~Expr.hs~ and ~Eval.hs~.

See ~maths.txt~ for an example program using maths expressions.

* Variables, Assignment and Sequence
Variables were surprisingly easy to add to the expression evaluator,
after spending 3 hours deciding how to do it[fn:4].  Since they are
used as ~String~ expressions that represent ~Values~, it seemed
natural to implement a symbol table that applies that mapping.

Having a sequence of instructions is only meaningful if the result of
one affects the next, by mutating state. The most basic mutation is
assignment. The obvious implementation for this is a ~State~
transformer that evaluates a ‘statement’, which may be an assignment.

There’s no sensible behaviour to continue execution if a variable is
not found, so crashing with ~error~ seems reasonable, in addition to
being much easier than wrapping everything in ~Maybe~.

The relevant files are ~Value.hs~, ~Assign.hs~, ~Statement.hs~ and
~Exec.hs~.

* Scoping
I want variables to only exist within the {scope} where they are
defined, since this allows programs to be more comprehensible.
My approach for implementing this is to have a stack of symbol tables,
with a new one added on top for each nested scope.

Since there is no separation between declaration and assignment of
variables, it is not possible to ‘shadow’ variables with the same name
in an outer scope; I consider shadowing an anti-pattern anyway, so
this doesn't bother me.


See ~sequence.txt~ for a demonstration of sequential execution and
variable scoping.

* Functions
I struggled to implement the ~pArgs~ parser until I discovered
~sepBy~, which just does what I want.


#+latex: \pagebreak
* Technology & Resources
These are resources I may have used for this coursework.
- [[https://github.com/mrkkrp/megaparsec][Megaparsec]], a monadic parsing library.
- [[https://markkarpov.com/tutorial/megaparsec.html][Megaparsec Tutorial]].
- This [[https://mmhaskell.com/parsing/megaparsec][Monday Morning Haskell post]].
- [[https://www.itu.dk/people/sestoft/plc/][Programming Language Concepts]], by Peter Sestoft.
- [[https://suif.stanford.edu/dragonbook/][Compilers: Principles, Techniques, and Tools]], by Aho et al.
- [[https://craftinginterpreters.com/][Crafting Interpreters]], by Robert Nystrom.
- [[http://learnyouahaskell.com/chapters][Learn You a Haskell for Great Good!]], by Miran Lipovača.
- [[https://hoogle.haskell.org/][Hoogle]].
- Yorkshire Tea (the most important one).
* Footnotes
[fn:4] The definitive Haskell experience.

[fn:3] I love GHC. I love GHC. I love GHC. I love GHC. I love GHC.
[fn:2] Probably not.

[fn:1] Though it saddens my inner lisper.
