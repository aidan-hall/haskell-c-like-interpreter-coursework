* Technology & Resources
- [[https://github.com/mrkkrp/megaparsec][Megaparsec]], a monadic parsing library.
- [[https://markkarpov.com/tutorial/megaparsec.html][Megaparsec Tutorial]].

* Project Ideas
** An esoteric programming language?
*** Criteria
- Funny
- Turing-complete?
- Justifiable to use *Parsec: Some amount of structure will be
  advisable.
- Possibly something to do with stacks
- Unicode
** Zork Command Interpreter
- Probably out of scope for 141.

* Funny Stack Language Design
   :PROPERTIES:
   :CUSTOM_ID: language-design
   :END:
- Don't try to make Haskell!
- Inspired by ~dc~?
- Everything is a stack.
- (‘Forward’ or Reverse) Polish notation?
- Function calls and data in the same stack.
- Start as an extension of RPN, and work up.
- Stack can have numbers, strings and functions.
- Functions 
- Everything is based on composition of primitives:
  - ~add~, ~multiply~, ~divide~, ~subtract~
  - ~define~: Pop values, and push them into a named stack.
  - ~push~: Can be applied to functions, allowing wacky stuff.
- Conditionals: "Eval if X > 0?"
- Problem: Needs to be interesting to evaluate with Megaparsec.
- Big problem: Needs to be a good project for 2 weeks.

| Symbol  | Meaning                                           |
|---------+---------------------------------------------------|
| .       | Terminate: Marks the end of input for a function. |
| @       | Evaluate: Pop a string, and copy from that stack. |
| +,-,*,/ | Maths functions.                                  |
| :       | Define (copy into that stack)                     |
| ~       | Swap the top two elements on the stack.           |
| ?       | If top value is zero, pop the second one as well. |
| >       | Read a number as input; push it to data stack.    |
** Stacks
- Input Stack :: All input symbols are placed on here.  The contents
  are evaluated when the evaluate symbol (@) is reached.
- Data Stack :: Classic RPN stack.
- Named Stacks :: Symbols can be copied in and out of these to create
  macros. E.g. double: ~2 *~.
** Examples
*** Maths
1 + 2 - 3
#+begin_src
  . 3 . 2 1 + @ - @
  . 3 . 2 1 + @ (-)
  . 3 . 2 1 0 (+ -)
  . 3 . 2 1 (+ -)
  . 3 . 3 (+ -)
  . 3 3 (-)
  0
#+end_src
Making character substitutions so (R)PN is more apparent makes it
obvious that I'm not doing anything particularly innovative.
#+begin_src
  ( 3 ( 2 1 + ) - )
  ( 3 ( 2 1 + ) (-)
  ( 3 ( 2 1 (+ -)
  ( 3 ( 2 1 (+ -)
  ( 3 ( 3 (+ -)
  ( 3 3 (-)
  0
#+end_src

#+begin_src
  . 2 1 + 3 - @
#+end_src
*** Fibonacci
#+begin_example
push 
#+end_example
